# docker-compose.yml  – stack de integración completo
# (sin campo 'version' porque ahora Compose lo desaconseja)

services:
  # ────────────────────────────── Base de datos ──────────────────────────────
  db:
    image: postgres:15-alpine
    platform: linux/amd64                 # evita aviso amd64/arm64
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: misw
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ──────────────────────────── Pub/Sub emulator ────────────────────────────
  pubsub:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:435.0.1-emulators
    platform: linux/amd64
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8085/ || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Inicializa topics / subscriptions cuando el emulador ya está healthy
  pubsub-init:
    image: curlimages/curl:8.8.0          # imagen súper ligera con curl
    platform: linux/amd64
    depends_on:
      pubsub:
        condition: service_healthy
    entrypoint: /bin/sh
    # una única línea con ';' – sin for/do/done → evita “syntax error: unexpected 'do'”
    command: >
      -c "
      EMU=http://pubsub:8085/v1; PROJECT_ID=misw-test;
      echo '⏳  Creando topics/subs en ' \$EMU;
      curl -sf -X PUT \$EMU/projects/\$PROJECT_ID/topics/pedidos-topic            || true;
      curl -sf -X PUT \$EMU/projects/\$PROJECT_ID/topics/inventarios-topic        || true;
      curl -sf -X PUT -H 'Content-Type: application/json'
           -d '{\"topic\":\"projects/'\$PROJECT_ID'/topics/pedidos-topic\"}'
           \$EMU/projects/\$PROJECT_ID/subscriptions/inventarios-sub              || true;
      curl -sf -X PUT -H 'Content-Type: application/json'
           -d '{\"topic\":\"projects/'\$PROJECT_ID'/topics/pedidos-topic\"}'
           \$EMU/projects/\$PROJECT_ID/subscriptions/PedidoCreadoInventarios-sub  || true;
      echo '✅  Pub/Sub inicializado';
      "

  # ───────────────────────────── Microservicio Pedidos ───────────────────────
  ms_pedidos:
    build:
      context: ../../pedidos              # ajusta el path si difiere
    platform: linux/amd64
    depends_on:
      db:
        condition: service_healthy
      pubsub-init:
        condition: service_completed_successfully
    env_file:
      - ../../pedidos/.env.test
    environment:
      DATABASE_URL: db           
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: misw
      DB_TYPE: postgresql
      PUBSUB_EMULATOR_HOST: pubsub:8085
      PROJECT_ID: misw-test
    ports:
      - "5002:8000"                       # contenedor 5000 → host 5002

  # ───────────────────────────── Microservicio Compras ───────────────────────
  ms_compras:
    build:
      context: ../../ms_compras
    platform: linux/amd64
    depends_on:
      db:
        condition: service_healthy
      pubsub-init:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/misw
      PUBSUB_EMULATOR_HOST: pubsub:8085
      PROJECT_ID: misw-test
    ports:
      - "5001:5000"                       # contenedor 5000 → host 5001

  # ──────────────────────────── Microservicio Inventarios ────────────────────
  ms_inventarios:
    build:
      context: ../../ms_inventarios
    platform: linux/amd64
    depends_on:
      db:
        condition: service_healthy
      pubsub-init:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/misw
      PUBSUB_EMULATOR_HOST: pubsub:8085
      PROJECT_ID: misw-test
    ports:
      - "5003:5000"                       # contenedor 5000 → host 5003

# ───────────────────────────────── Volúmenes ─────────────────────────────────
volumes:
  pgdata: